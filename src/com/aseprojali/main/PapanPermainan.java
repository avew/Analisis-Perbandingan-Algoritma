/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aseprojali.main;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Avew
 */
public class PapanPermainan extends javax.swing.JFrame {

    String listKata = "/home/avew/Documents/AnalisisPerbandinganAlgoritma/src/com/aseprojali/main/wordlist.txt";

    public static String[] papan = null; // papan dasar
    public static String[] papanVertikal = null; // papan vertikal
    public static String[] papanDiagonalKiriAtasKeKananBawahPart1 = null; // papan diagonal kiri atas kanan
    // bawah 1
    public static String[] papanDiagonalKiriAtasKeKananBawahPart2 = null; // papan diagonal kiri atas kanan
    // bawah 2
    public static String[] papanDiagonalKananAtasKeKiriBawahPart1 = null; // papan diagonal kanan atas kiri
    // bawah 1
    public static String[] papanDiagonalKananAtasKeKiriBawahPart2 = null; // papan diagonal kanan atas kiri
    // bawah 2
    public String grid = null;
    public String kata = null;
    private long waktuEksekusi = 0;
    String newLine = System.getProperty("line.separator");

    /**
     * Creates new form PapanPermainan
     */
    public PapanPermainan() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        initComponents();
        txtKata.setEnabled(false);
        btnKnuthMorrisPratt.setEnabled(false);
        txtKolom.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                ambilKolom();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                ambilKolom();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                ambilKolom();
            }
        });

        txtBaris.setEditable(false);
    }

    public void ambilKolom() {
        String klm = txtKolom.getText();
        txtBaris.setText(klm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSetPapan = new javax.swing.JPanel();
        txtKolom = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBaris = new javax.swing.JTextField();
        buttonSetPapan = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        panelHasil = new javax.swing.JPanel();
        panelKmp = new javax.swing.JPanel();
        txtWaktuKmp = new javax.swing.JLabel();
        panelBm = new javax.swing.JPanel();
        txtWaktuBm = new javax.swing.JLabel();
        txtDitemukanKmp = new javax.swing.JLabel();
        txtKata = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnKnuthMorrisPratt = new javax.swing.JButton();
        btnRandom = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textSolusi = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        listPola = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPuzzle = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.SystemColor.windowBorder);

        panelSetPapan.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Papan "));

        jLabel8.setText("x");

        buttonSetPapan.setText("SET");
        buttonSetPapan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetPapanActionPerformed(evt);
            }
        });

        jLabel4.setText("Kolom");

        jLabel9.setText("Baris");

        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSetPapanLayout = new javax.swing.GroupLayout(panelSetPapan);
        panelSetPapan.setLayout(panelSetPapanLayout);
        panelSetPapanLayout.setHorizontalGroup(
            panelSetPapanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSetPapanLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtKolom, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBaris, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSetPapan, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addGap(20, 20, 20))
        );
        panelSetPapanLayout.setVerticalGroup(
            panelSetPapanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSetPapanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtKolom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8)
                .addComponent(txtBaris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSetPapan)
                .addComponent(jLabel4)
                .addComponent(jLabel9)
                .addComponent(btnReset))
        );

        panelHasil.setBorder(javax.swing.BorderFactory.createTitledBorder("Hasil Pencarian Kata"));

        panelKmp.setBorder(javax.swing.BorderFactory.createTitledBorder("Knuth Morris Pratt"));

        txtWaktuKmp.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtWaktuKmp.setForeground(java.awt.Color.green);
        txtWaktuKmp.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout panelKmpLayout = new javax.swing.GroupLayout(panelKmp);
        panelKmp.setLayout(panelKmpLayout);
        panelKmpLayout.setHorizontalGroup(
            panelKmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKmpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtWaktuKmp, javax.swing.GroupLayout.DEFAULT_SIZE, 1257, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelKmpLayout.setVerticalGroup(
            panelKmpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKmpLayout.createSequentialGroup()
                .addComponent(txtWaktuKmp, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelBm.setBorder(javax.swing.BorderFactory.createTitledBorder("Boyer Moore"));
        panelBm.setForeground(java.awt.Color.blue);

        txtWaktuBm.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtWaktuBm.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout panelBmLayout = new javax.swing.GroupLayout(panelBm);
        panelBm.setLayout(panelBmLayout);
        panelBmLayout.setHorizontalGroup(
            panelBmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtWaktuBm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBmLayout.setVerticalGroup(
            panelBmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBmLayout.createSequentialGroup()
                .addComponent(txtWaktuBm, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        txtDitemukanKmp.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtDitemukanKmp.setForeground(java.awt.Color.red);
        txtDitemukanKmp.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout panelHasilLayout = new javax.swing.GroupLayout(panelHasil);
        panelHasil.setLayout(panelHasilLayout);
        panelHasilLayout.setHorizontalGroup(
            panelHasilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelKmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelBm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHasilLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtDitemukanKmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelHasilLayout.setVerticalGroup(
            panelHasilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHasilLayout.createSequentialGroup()
                .addComponent(txtDitemukanKmp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelKmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        txtKata.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N

        jLabel5.setText("Cari Kata");

        btnKnuthMorrisPratt.setText("CARI KATA");
        btnKnuthMorrisPratt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKnuthMorrisPrattActionPerformed(evt);
            }
        });

        btnRandom.setText("RANDOM KARAKTER");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        textSolusi.setColumns(20);
        textSolusi.setFont(new java.awt.Font("Ubuntu Light", 0, 12)); // NOI18N
        textSolusi.setRows(5);
        jScrollPane2.setViewportView(textSolusi);

        listPola.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listPola.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPolaMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(listPola);

        txtPuzzle.setColumns(20);
        txtPuzzle.setFont(new java.awt.Font("Ubuntu Light", 0, 12)); // NOI18N
        txtPuzzle.setRows(5);
        jScrollPane1.setViewportView(txtPuzzle);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHasil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelSetPapan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtKata)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnKnuthMorrisPratt, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnKnuthMorrisPratt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtKata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelSetPapan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelHasil, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKnuthMorrisPrattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKnuthMorrisPrattActionPerformed

        if (txtKata.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Kata yang dicari belum dipilih");
        } else {
            cariKmp();
            cariBm();
        }

    }//GEN-LAST:event_btnKnuthMorrisPrattActionPerformed

    private void buttonSetPapanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetPapanActionPerformed
        btnKnuthMorrisPratt.setEnabled(true);
        setPapan();
    }//GEN-LAST:event_buttonSetPapanActionPerformed


    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        randomKarakter();
    }//GEN-LAST:event_btnRandomActionPerformed


    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void listPolaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPolaMouseClicked
        String selectedText = (String) listPola.getSelectedValue();
        txtKata.setText(String.valueOf(selectedText));
    }//GEN-LAST:event_listPolaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String[] p = {"HIU,", "AYAM", "DOMBA", "CACING", "KAMBING", "FLAMINGO", "SAPIHUTAN", "JALAKPUTIH"};
        DecimalFormat formatter = new DecimalFormat("#0.000");
        long starTimeKmp, endTimeKmp, totalTime = 0;
        long starTimeBm, endTimeBm, totalTimeBm = 0;
        for (String i : p) {
            System.out.println("CARI KATA DENGAN KMP " + i);
            starTimeKmp = System.currentTimeMillis();
            this.pencarianKmp(i);
            endTimeKmp = System.currentTimeMillis();
            totalTime = endTimeKmp - starTimeKmp;

            System.out.println("Ditemukan KMP dengan waktu " + formatter.format(totalTime / 1000d));
        }

        for (String i : p) {
            System.out.println("CARI KATA DENGAN BM " + i);
            starTimeBm = System.currentTimeMillis();
            this.pencarianBm(i);
            endTimeBm = System.currentTimeMillis();
            totalTimeBm = endTimeBm - starTimeBm;
            System.out.println("Ditemukan Bm dengan waktu " + formatter.format(totalTimeBm / 1000d));
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Proses pencarian Knuth Morris Pratt
     *
     * @param kata pola kata
     */
    public void pencarianKmp(String kata) {
        try {
            int kolom = Integer.parseInt(txtKolom.getText().trim());
            int kolomKurangSatu = kolom - 1;
            boolean status = false;
            papan = null;
            //System.out.println("papan kmp" + papan);

            papan = jadikanPapan();
            // Buat papan secara vertikal dari grid papan

            papanVertikal = new String[kolom];
            for (int i = 0; i <= kolom - 1; i++) {
                char[] tmp = new char[kolom];
                for (int j = 0; j <= kolom - 1; j++) {
                    tmp[j] = papan[j].toString().charAt(i);
                }
                papanVertikal[i] = String.valueOf(tmp);
                // buat papan kolom atas ke bawah
                //System.out.println("papanVertikal " + papanVertikal[i]);
                //papanVertikal APANDANOPQ
                //papanVertikal BOGFIJADUK
                //papanVertikal MBGORILAAE
                //papanVertikal OEFGDKTMRC
                //papanVertikal DBEHNGBISO
                //papanVertikal AEDGNIRDKA
                //papanVertikal AKECNUMKTU
                //papanVertikal YBCGNLHAGA
                //papanVertikal ACACINGILB
                //papanVertikal MUSANGMCMF
            }
            // end buat papan vertikal

            // buat papan diagonal dari kiri atas ke kanan bawah bagian atas part 1
            papanDiagonalKiriAtasKeKananBawahPart1 = new String[kolom];
            int ijk = kolom;
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[ijk];
                for (int j = 0; j < ijk; j++) {
                    for (int k = i; k <= kolomKurangSatu; k++) {
                        if ((k - i) == j) {
                            tmp[k - i] = papan[j].toString().charAt(k);
                        }
                        //buat jadi baris semua
                        //System.out.print(papan[j].toString().charAt(k));
                        //potong diagonal jadi part 1
                        //System.out.print(tmp[k-i]);
                    }
                }
                papanDiagonalKiriAtasKeKananBawahPart1[i] = String.valueOf(tmp);
                ijk--;
                //System.out.println("papanDiagonal " + papanDiagonalKiriAtasKeKananBawahPart1[i]);
                //papanDiagonal AOGGNIMALF
                //papanDiagonal BBFHNUHIM
                //papanDiagonal MEEGNLGC
                //papanDiagonal OBDCNNM
                //papanDiagonal DEEGIG
                //papanDiagonal AKCCN
                //papanDiagonal ABAA
                //papanDiagonal YCS
                //papanDiagonal AU
                //papanDiagonal M
            }

            // end papan diagonal dari kiri atas ke kanan bawah bagian atas part 1
            /**
             *
             * buat papan diagonal dari kiri atas ke kanan bawah bagian bawah 2
             * part
             */
            papanDiagonalKiriAtasKeKananBawahPart2 = new String[kolom];
            int jkl = kolom;
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[jkl];
                for (int j = i; j <= kolomKurangSatu; j++) {
                    for (int k = 0; k < jkl; k++) {
                        if ((j - i) == k) {
                            tmp[j - i] = papan[j].toString().charAt(k);
                        }
                        //buat jadi baris semua
                        //System.out.print(papan[j].toString().charAt(k));
                        //potong diagonal jadi part 2
                        //System.out.print(tmp[j - i]);
                    }
                }
                papanDiagonalKiriAtasKeKananBawahPart2[i] = String.valueOf(tmp);
                jkl--;
                //System.out.println(papanDiagonalKiriAtasKeKananBawahPart2[i]);
            }
        // end diagonal dari kiri atas ke kanan bawah bagian bawah 2 part

            // buat papan diagonal dari kanan atas ke kiri bawah bagian atas part 1
            papanDiagonalKananAtasKeKiriBawahPart1 = new String[kolom];
            int klm = kolom;
            for (int i = kolomKurangSatu; i >= 0; i--) {
                char[] tmp = new char[klm];
                for (int j = 0; j <= klm; j++) {
                    for (int k = i; k >= 0; k--) {
                        if ((i - k) == j) {
                            tmp[i - k] = papan[j].toString().charAt(k);
                        }
                        //System.out.println(papan[j].toString().charAt(k));
                        //System.out.print(tmp[i-k]);
                    }
                }
                papanDiagonalKananAtasKeKiriBawahPart1[i] = String.valueOf(tmp);
                klm--;
                //System.out.println(papanDiagonalKananAtasKeKiriBawahPart1[i]);
            }

            // end papan diagonal dari kanan atas ke kiri bawah bagian atas part 1
            // buat papan diagonal dari kanan atas ke kiri bawah bagian bawah part 2
            papanDiagonalKananAtasKeKiriBawahPart2 = new String[kolom];
            int lmn = kolom;
            int bantu = kolomKurangSatu;
            for (int i = 0; i <= kolom - 1; i++) {
                char[] tmp = new char[lmn];
                for (int j = kolomKurangSatu; j >= i; j--) {
                    // System.out.print("ASD");
                    for (int k = i; k <= kolomKurangSatu; k++) {
                        if ((bantu - k) == j) {
                            tmp[k - i] = papan[j].toString().charAt(k); // j - i
                            // System.out.print(papan[j].toString().charAt(k));
                        }
                    }
                }
                papanDiagonalKananAtasKeKiriBawahPart2[i] = String.valueOf(tmp);
                lmn--;
                //System.out.println(papanDiagonalKananAtasKeKiriBawahPart2[i]);
                bantu++;

            }
            // end papan diagonal

            /*
             *Inisialiasi Algoritma knuth morris pratt
             */
            KnuthMorrisPratt kmp = new KnuthMorrisPratt();

            /*
             *Eksekusi secara baris kiri ke kanan
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papan[i];
                    kmp.search(grid, kata);
                    if (kmp.getPosisiSama() != "") {

                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "\n dari kiri ke kanan " + " di Kolom "
                                + kmp.getPosisiSama() + "dari Kiri, baris ke "
                                + i + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + " dari kiri ke kanan di Kolom "
                                + kmp.getPosisiSama() + "dari Kiri, baris ke "
                                + i + " dari atas");

                        status = true;
                    }
                }
            }


            /*
             *Eksekusi secara baris kanan ke kiri
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papan[i];
                    kmp.search(reverseKolom(grid), kata);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + newLine + " dari kanan ke kiri di Kolom "
                                + kmp.getPosisiSama()
                                + "dari Kanan, baris ke "
                                + i
                                + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + " dari kanan ke kiri di Kolom "
                                + kmp.getPosisiSama()
                                + "dari Kanan, baris ke "
                                + i
                                + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara vertikal atau kolom atas ke bawah
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanVertikal[i];
                    kmp.search(grid, kata);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + " dari atas ke bawah di baris ke- "
                                + kmp.getPosisiSama()
                                + "dari kiri "
                                + ", kolom ke-"
                                + i + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + " dari atas ke bawah di baris ke- "
                                + kmp.getPosisiSama()
                                + "dari kiri "
                                + ", kolom ke-"
                                + i + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara vertikal atau kolom  bawah ke atas
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanVertikal[i]);
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + " dari bawah ke atas di baris ke-"
                                + kmp.getPosisiSama()
                                + "dari bawah"
                                + ", kolom ke-"
                                + i + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + " dari bawah ke atas di baris ke-"
                                + kmp.getPosisiSama()
                                + "dari bawah"
                                + ", kolom ke-"
                                + i + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kiri atas ke kanan bawah
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKiriAtasKeKananBawahPart1[i];
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + " secara diagonal dari kiri atas ke kanan bawah di baris "
                                + kmp.getPosisiSama()
                                + "dari atas, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri atas ke kanan bawah di baris "
                                + kmp.getPosisiSama()
                                + "dari atas, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kanan bawah ke kiri atas
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKiriAtasKeKananBawahPart1[i]);
                    kmp.search(grid, kata);

                    if (kmp.getPosisiSama() != "") {
                        String posisi = kmp.getPosisiSama();
                        int h = Integer.parseInt(posisi.valueOf(i));
                        String kl = String.valueOf(h + 1);
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan bawah ke kiri atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah, berakhir di kolom ke "
                                + (i + 2) + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan bawah ke kiri atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah, berakhir di kolom ke "
                                + (i + 2) + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kiri atas ke kanan bawah
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKiriAtasKeKananBawahPart2[i];
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri atas ke kanan bawah di kolom ke-"
                                + kmp.getPosisiSama()
                                + "dari kiri, baris ke "
                                + (i + 2)
                                + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri atas ke kanan bawah di kolom ke-"
                                + kmp.getPosisiSama()
                                + "dari kiri, baris ke "
                                + (i + 2)
                                + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kanan bawah ke kiri atas bagian 2
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKiriAtasKeKananBawahPart2[i]);
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan bawah ke kiri atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah,  kolom ke "
                                + (i + 1)
                                + " dari kanan");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan bawah ke kiri atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah,  kolom ke "
                                + (i + 1)
                                + " dari kanan");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kanan atas ke kiri bawah
             */
            if (!status) {

                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKananAtasKeKiriBawahPart1[i];
                    //System.out.println("papanDiagonal3" + papanDiagonalKananAtasKeKiriBawahPart1[i]);
                    kmp.search(grid, kata);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan atas ke kiri bawah di baris "
                                + kmp.getPosisiSama()
                                + "dari atas, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan atas ke kiri bawah di baris "
                                + kmp.getPosisiSama()
                                + "dari atas, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kiri bawah ke kanan atas
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKananAtasKeKiriBawahPart1[i]);
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri bawah ke kanan atas di kolom "
                                + kmp.getPosisiSama()
                                + "dari kiri, baris ke "
                                + (i + 1)
                                + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri bawah ke kanan atas di kolom "
                                + kmp.getPosisiSama()
                                + "dari kiri, baris ke "
                                + (i + 1)
                                + " dari atas");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kiri bawah ke kanan atas
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKananAtasKeKiriBawahPart2[i];
                    kmp.search(grid, kata);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri bawah ke kanan atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kiri bawah ke kanan atas di baris "
                                + kmp.getPosisiSama()
                                + "dari bawah, kolom ke "
                                + (i + 1)
                                + " dari kiri");
                        status = true;
                    }
                }
            }

            /*
             *Eksekusi secara diagonal dari kanan atas ke kiri bawah
             */
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKananAtasKeKiriBawahPart2[i]);
                    kmp.search(grid, kata);
                    // System.out.println(grid);
                    if (kmp.getPosisiSama() != "") {
                        txtDitemukanKmp.setText("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan atas ke kiri bawah di kolom "
                                + kmp.getPosisiSama()
                                + "dari kanan, baris ke "
                                + (i + 2)
                                + " dari atas");
                        /*
                         *Lihat di output
                         */
                        System.out.println("Ditemukan kata " + txtKata.getText() + "secara diagonal dari kanan atas ke kiri bawah di kolom "
                                + kmp.getPosisiSama()
                                + "dari kanan, baris ke "
                                + (i + 2)
                                + " dari atas");
                        status = true;
                    }
                }
            }

            if (!status) {
                System.out.println("TIDAK DITEMUKAN");
                txtDitemukanKmp.setText("Tidak ditemukan kata");

            }

        } catch (NumberFormatException e) {
        }

    }

    public void pencarianBm(String kata) {
        try {
            int kolom = Integer.parseInt(txtKolom.getText().trim());
            int kolomKurangSatu = kolom - 1;
            boolean status = false;
            papan = null;

            papan = jadikanPapan();
            // buat papan secaara vertikal dari grid papan
            papanVertikal = new String[kolom];
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[kolom];
                for (int j = 0; j <= kolomKurangSatu; j++) {
                    tmp[j] = papan[j].toString().charAt(i);
                }
                papanVertikal[i] = String.valueOf(tmp);
            }
            // end buat papan vertikal
            // buat papan diagonal dari kiri atas ke kanan bawah
            papanDiagonalKiriAtasKeKananBawahPart1 = new String[kolom];
            int ijk = kolom;
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[ijk];
                for (int j = 0; j < ijk; j++) {
                    for (int k = i; k <= kolomKurangSatu; k++) {
                        if ((k - i) == j) {
                            tmp[k - i] = papan[j].toString().charAt(k);
                        }
                        // System.out.print(papan[j].toString().charAt(k));
                    }
                }
                papanDiagonalKiriAtasKeKananBawahPart1[i] = String.valueOf(tmp);
                ijk--;
            }
		// System.out.println(papanDiagonalKiriAtasKeKananBawahPart1[9]);

            // end papan diagonal
            // buat papan diagonal dari kiri atas ke kanan bawah bagian 2
            papanDiagonalKiriAtasKeKananBawahPart2 = new String[kolom];
            int jkl = kolom;
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[jkl];
                for (int j = i; j <= kolomKurangSatu; j++) {
                    for (int k = 0; k < jkl; k++) {
                        if ((j - i) == k) {
                            tmp[j - i] = papan[j].toString().charAt(k);
                        }
                        // System.out.print(papan[j].toString().charAt(k));
                    }
                }
                papanDiagonalKiriAtasKeKananBawahPart2[i] = String.valueOf(tmp);
                jkl--;
            }
            // System.out.println(papanDiagonalKiriAtasKeKananBawahPart2[0]);
            // end diagonal bagian 2
            // buat papan diagonal dari kiri atas ke kanan bawah
            papanDiagonalKananAtasKeKiriBawahPart1 = new String[kolom];
            int klm = kolom;
            for (int i = kolomKurangSatu; i >= 0; i--) {
                char[] tmp = new char[klm];
                for (int j = 0; j <= klm; j++) {
                    // System.out.print("ASD");
                    for (int k = i; k >= 0; k--) {
                        if ((i - k) == j) {
                            tmp[i - k] = papan[j].toString().charAt(k);
                        }
                        // System.out.print(papan[j].toString().charAt(k));
                    }
                }
                papanDiagonalKananAtasKeKiriBawahPart1[i] = String.valueOf(tmp);
                klm--;
            }
		// System.out.println(papanDiagonalKiriAtasKeKananBawahPart1[9]);

            // end papan diagonal
            // buat papan diagonal dari kiri atas ke kanan bawah part 2
            papanDiagonalKananAtasKeKiriBawahPart2 = new String[kolom];
            int lmn = kolom;
            int bantu = kolomKurangSatu;
            for (int i = 0; i <= kolomKurangSatu; i++) {
                char[] tmp = new char[lmn];
                for (int j = kolomKurangSatu; j >= i; j--) {
                    // System.out.print("ASD");
                    for (int k = i; k <= kolomKurangSatu; k++) {
                        if ((bantu - k) == j) {
                            tmp[k - i] = papan[j].toString().charAt(k); // j - i
                            // System.out.print(papan[j].toString().charAt(k));
                        }
                    }
                }
                papanDiagonalKananAtasKeKiriBawahPart2[i] = String.valueOf(tmp);
                lmn--;
                bantu++;
            }
		// System.out.println(papanDiagonalKananAtasKeKiriBawahPart2[9]);

            // end papan diagonal
            // ALGORITMA BM DIMULAI
            BoyerMoore bm = new BoyerMoore();
            // eksekusi secara kolom kiri ke kanan
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papan[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata dari kiri ke kanan di Kolom "
                                        + bm.getPosisiSama() + "dari Kiri, baris ke "
                                        + i + " dari atas");
                        status = true;
                    }
                }
            }

            // eksekusi secara kolom kanan ke kiri
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papan[i];
                    bm.search(reverseKolom(grid), kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata dari kanan ke kiri di Kolom "
                                        + bm.getPosisiSama()
                                        + "dari Kanan, baris ke "
                                        + i
                                        + " dari atas");
                        status = true;
                    }
                }
            }
            // eksekusi secara vertikal atas ke bawah
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanVertikal[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata dari atas ke bawah di baris "
                                        + bm.getPosisiSama()
                                        + ", kolom ke "
                                        + i + " dari atas");
                        status = true;
                    }
                }
            }
            // eksekusi secara vertikal bawah ke atas
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanVertikal[i]);
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata dari bawah ke atas di baris "
                                        + bm.getPosisiSama()
                                        + "dari bawah, kolom ke " + i + "");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kiri atas ke kanan bawah
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKiriAtasKeKananBawahPart1[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kiri atas ke kanan bawah di baris "
                                        + bm.getPosisiSama()
                                        + "dari atas, kolom ke "
                                        + (i + 1)
                                        + " dari kiri");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kanan bawah ke kiri atas
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKiriAtasKeKananBawahPart1[i]);
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kanan bawah ke kiri atas di baris "
                                        + bm.getPosisiSama()
                                        + "dari bawah, berakhir di kolom ke "
                                        + (i + 2) + " dari atas");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kiri atas ke kanan bawah
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKiriAtasKeKananBawahPart2[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kiri atas ke kanan bawah di kolom "
                                        + bm.getPosisiSama()
                                        + "dari kiri, baris ke "
                                        + (i + 2)
                                        + " dari atas");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kanan bawah ke kiri atas bagian 2
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKiriAtasKeKananBawahPart2[i]);
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kanan bawah ke kiri atas di baris "
                                        + bm.getPosisiSama()
                                        + "dari bawah,  kolom ke "
                                        + (i + 1)
                                        + " dari kanan");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kanan atas ke k bawah
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKananAtasKeKiriBawahPart1[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kanan atas ke kiri bawah di baris "
                                        + bm.getPosisiSama()
                                        + "dari atas, kolom ke "
                                        + (i + 1)
                                        + " dari kiri");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kanan atas ke kiri bawah
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKananAtasKeKiriBawahPart1[i]);
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kiri bawah ke kanan atas di kolom "
                                        + bm.getPosisiSama()
                                        + "dari kiri, baris ke "
                                        + (i + 1)
                                        + " dari atas");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kiri bawah ke kanan atas
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = papanDiagonalKananAtasKeKiriBawahPart2[i];
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kiri bawah ke kanan atas di baris "
                                        + bm.getPosisiSama()
                                        + "dari bawah, kolom ke "
                                        + (i + 1)
                                        + " dari kiri");
                        status = true;
                    }
                }
            }
            // eksekusi secara diagonal dari kiri bawah ke kanan atas
            if (!status) {
                for (int i = 0; i <= kolomKurangSatu; i++) {
                    grid = reverseKolom(papanDiagonalKananAtasKeKiriBawahPart2[i]);
                    bm.search(grid, kata);
                    // System.out.println(grid);
                    if (bm.getPosisiSama() != "") {
                        System.out
                                .println("Ditemukan Kata secara diagonal dari kanan atas ke kiri bawah di kolom "
                                        + bm.getPosisiSama()
                                        + "dari kanan, baris ke "
                                        + (i + 2)
                                        + " dari atas");
                        status = true;
                    }
                }
            }

            if (!status) {
                System.out.println("TIDAK DITEMUKAN");
                txtDitemukanKmp.setText("Tidak ditemukan kata");
            }
        } catch (NumberFormatException e) {
        }

    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKnuthMorrisPratt;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton buttonSetPapan;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listPola;
    private javax.swing.JPanel panelBm;
    private javax.swing.JPanel panelHasil;
    private javax.swing.JPanel panelKmp;
    private javax.swing.JPanel panelSetPapan;
    private javax.swing.JTextArea textSolusi;
    private javax.swing.JTextField txtBaris;
    private javax.swing.JLabel txtDitemukanKmp;
    private javax.swing.JTextField txtKata;
    private javax.swing.JTextField txtKolom;
    private javax.swing.JTextArea txtPuzzle;
    private javax.swing.JLabel txtWaktuBm;
    private javax.swing.JLabel txtWaktuKmp;
    // End of variables declaration//GEN-END:variables

    //getter setter
    public JList getListPola() {
        return listPola;
    }

    public void setListPola(JList listPola) {
        this.listPola = listPola;
    }

    public JTextArea getTextPuzzle() {
        return txtPuzzle;
    }

    public void setTextPuzzle(JTextArea textPuzzle) {
        this.txtPuzzle = textPuzzle;
    }

    public JTextArea getTextSolusi() {
        return textSolusi;
    }

    public void setTextSolusi(JTextArea textSolusi) {
        this.textSolusi = textSolusi;
    }

    public JLabel getTextWaktuKmp() {
        return txtWaktuKmp;
    }

    public void setTextWaktuKmp(JLabel textWaktuKmp) {
        this.txtWaktuKmp = textWaktuKmp;
    }

    public JTextField getTxtBaris() {
        return txtBaris;
    }

    public void setTxtBaris(JTextField txtBaris) {
        this.txtBaris = txtBaris;
    }

    public JTextField getTxtKata() {
        return txtKata;
    }

    public void setTxtKata(JTextField txtKata) {
        this.txtKata = txtKata;
    }

    public JTextField getTxtKolom() {
        return txtKolom;
    }

    public void setTxtKolom(JTextField txtKolom) {
        this.txtKolom = txtKolom;
    }

    //hapus 
    public void reset() {
        jadikanNull();
        txtKolom.setText("");
        txtBaris.setText("");
        txtPuzzle.setText("");
        textSolusi.setText("");
        txtKata.setText("");
        txtDitemukanKmp.setText("");
        txtWaktuKmp.setText("");
        txtWaktuBm.setText("");

        DefaultListModel listModel = (DefaultListModel) listPola.getModel();
        listModel.removeAllElements();

        txtKolom.requestFocus();
        btnKnuthMorrisPratt.setEnabled(false);

    }

    public void randomKarakter() {
        papan = null;
        papanVertikal = null; // papan vertikal
        papanDiagonalKiriAtasKeKananBawahPart1 = null; // papan diagonal kiri atas kanan
        // bawah 1
        papanDiagonalKiriAtasKeKananBawahPart2 = null; // papan diagonal kiri atas kanan
        // bawah 2
        papanDiagonalKananAtasKeKiriBawahPart1 = null; // papan diagonal kanan atas kiri
        // bawah 1
        papanDiagonalKananAtasKeKiriBawahPart2 = null; // papan diagonal kanan atas kiri
        // bawah 2
        grid = null;
        kata = null;
        waktuEksekusi = 0;
        Scanner stdin = null;
        StringBuilder wordList = new StringBuilder();
        Random r = new Random();
        String s;
        ArrayList<String> l = new ArrayList<String>();
        char nwords = 100;
        //validasi
        if (txtBaris.getText().isEmpty() && txtKolom.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Set kolom dan baris tidak boleh kosong");
            txtKolom.requestFocus();
        } else if ((Integer.parseInt(txtBaris.getText()) == 0) && (Integer.parseInt(txtKolom.getText()) == 0)) {
            JOptionPane.showMessageDialog(rootPane, "Kolom dan baris tidak boleh bernilai 0");
            txtKolom.setText("");
            txtBaris.setText("");
            txtKolom.requestFocus();
        } else {

            int row = Integer.parseInt(txtBaris.getText());
            int col = Integer.parseInt(txtKolom.getText());

            try {
                stdin = new Scanner(new File(listKata));
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(panelKmp, "File tidak ditemukan");
            }

            while (stdin.hasNext()) {
                s = stdin.next();
                if (s.length() < (row - 1) && s.length() < (col - 1)) {
                    l.add(s);
                }
            }
            if (l.size() > 100) {
                for (int c = 0; c < nwords; c++) {
                    int i = r.nextInt(nwords - c);
                    wordList.append(l.get(i) + " ");
                    l.remove(i);
                }
            } else {
                for (int c = 0; c < l.size(); c++) {
                    wordList.append(l.get(c) + " ");
                }
            }

            String[] list = wordList.toString().split(" ");
            Matrix m = new Matrix(list, row, col);
            txtPuzzle.setText(m.getPuzzle());
            textSolusi.setText(m.getSolution());

        }
    }

    public void setPapan() {
        jadikanNull();
        Scanner stdin = null;
        StringBuilder wordList = new StringBuilder();
        Random r = new Random();
        String s;
        ArrayList<String> l = new ArrayList<>();
        char nwords = 10000;
        if (txtBaris.getText().isEmpty() && txtKolom.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Set kolom dan baris tidak boleh kosong");
            txtKolom.requestFocus();
        } else if ((Integer.parseInt(txtBaris.getText()) == 0) && (Integer.parseInt(txtKolom.getText()) == 0)) {
            JOptionPane.showMessageDialog(rootPane, "Kolom dan baris tidak boleh bernilai 0");
            txtKolom.setText("");
            txtBaris.setText("");
            txtKolom.requestFocus();
        } else {
            //baris
            int row = Integer.parseInt(txtBaris.getText());
            //kolom
            int col = Integer.parseInt(txtKolom.getText());

            try {
                stdin = new Scanner(new File(listKata));
            } catch (FileNotFoundException e) {
                System.out.println("File tidak ditemukan");
            }

            while (stdin.hasNext()) {
                s = stdin.next();
                if (s.length() < (row - 1) && s.length() < (col - 1)) {
                    l.add(s);
                }
            }
            if (l.size() > 1000) {
                for (int c = 0; c < nwords; c++) {
                    int i = r.nextInt(nwords - c);
                    wordList.append(l.get(i)).append(" ");
                    l.remove(i);
                }
            } else {
                for (int c = 0; c < l.size(); c++) {
                    wordList.append(l.get(c) + " ");
                }
            }

            String[] list = wordList.toString().split(" ");

            Matrix m = new Matrix(list, row, col);

            //PapanPermainan pp = new PapanPermainan();
            File archivo = null;
            FileReader fr = null;
            BufferedReader br = null;

            try {
                archivo = new File(listKata);
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);
                // normally I would prefer to use an ArrayList, but JList
                // has a constructor that takes a Vector directly.
                Vector<String> lines = new Vector<String>();
                DefaultListModel listModel = new DefaultListModel();
                String line;
                while ((line = br.readLine()) != null) {
                    listModel.addElement(line);
                    System.out.println(line);
                    //lines.add(line);
                }
                this.getListPola().setModel(listModel);

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (null != fr) {
                        fr.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }

            this.getTextPuzzle().setText(m.getPuzzle());
            this.getTextSolusi().setText(m.getSolution());

            System.out.println("Puzzle:\n" + m.getPuzzle() + '\n' + "Solusi:\n" + m.getSolution());
            System.out.println("Kata yang dicari:\n" + m.selectedWords);
        }
    }

    public void cariKmp() {
//        txtWaktuKmp.setText("");
//        long startTime = System.nanoTime();
//        jadikanNull();
//        pencarianKmp(txtKata.getText().trim().toUpperCase());
//        long endTime = System.nanoTime();
//        double totalTime = (endTime - startTime) / 1000000000.0;

        long startTime, endTime, totalTime = 0;
        txtWaktuKmp.setText("");
        jadikanNull();
        startTime = System.currentTimeMillis();
        pencarianKmp(txtKata.getText().trim().toUpperCase());
        endTime = System.currentTimeMillis();
        totalTime = endTime - startTime;

        DecimalFormat formatter = new DecimalFormat("#0.000");
        System.out.println("Waktu Eksekusi Algoritma KMP "
                + formatter.format((totalTime) / 1000d) + " Detik");
        String test = txtDitemukanKmp.getText();
        if (test.contentEquals("Tidak ditemukan kata")) {
            txtWaktuKmp.setText("");
            txtWaktuBm.setText("");
            txtWaktuKmp.setText("Kata yang dicari tidak ada");

        } else {
            txtWaktuKmp.setText("Waktu Pencarian Algoritma Knuth Morris Pratt adalah "
                    + formatter.format((totalTime) / 1000d) + " Detik");
//            txtWaktuKmp.setText("Waktu Pencarian Algoritma Knuth Morris Pratt adalah "
//                    + totalTime + " Detik");
        }
    }

    public void cariBm() {

//        txtWaktuBm.setText("");
//        long startTime = System.nanoTime();
//        jadikanNull();
//        this.pencarianBm(txtKata.getText().trim().toUpperCase());
//        long endTime = System.nanoTime();
//        double totalTime = (endTime - startTime) / 1000000000.0;
        long startTime, endTime, totalTime = 0;
        txtWaktuBm.setText("");
        jadikanNull();
        startTime = System.currentTimeMillis();
        this.pencarianBm(txtKata.getText().trim().toUpperCase());
        endTime = System.currentTimeMillis();
        totalTime = endTime - startTime;

        DecimalFormat formatter = new DecimalFormat("#0.000");
        System.out.println("Waktu Eksekusi Algoritma Boyer Moore "
                + formatter.format((totalTime) / 1000d) + " Detik");
        String test = txtDitemukanKmp.getText();
        if (test.contentEquals("Tidak ditemukan kata")) {
            txtWaktuBm.setText("");
            txtWaktuBm.setText("Kata yang dicari tidak ada");
        } else {
            txtWaktuBm.setText("Waktu Pencarian Algoritma Boyer Moore adalah "
                    + formatter.format((totalTime) / 1000d) + " Detik");
//            txtWaktuBm.setText("Waktu Pencarian Algoritma Boyer Moore adalah "
//                    + totalTime + " Detik");
        }
    }

    /**
     *
     * @return
     */
    public String[] jadikanPapan() {

        int kolom = Integer.parseInt(txtKolom.getText());
        String[] str = new String[kolom];
        try {
            try ( //baca text dari text area
                    BufferedReader bReader = new BufferedReader(new StringReader(txtPuzzle.getText()))) {
                String line = bReader.readLine();
                String readedData = "";
                while (line != null) {
                    readedData += line;
                    line = bReader.readLine();
                }
                readedData = readedData.replace(" ", "");
                for (int i = 0; i < str.length; i++) {
                    str[i] = readedData.substring(0, kolom);
                    readedData = readedData.substring(kolom);
                }
            }
        } catch (IOException e) {
        }
        return str;
    }

    //ubah cara baca
    public String reverseKolom(String kolom) {
        String temp = "";
        for (int i = kolom.length() - 1; i >= 0; i--) {
            temp += String.valueOf(kolom.charAt(i));
        }
        return temp;
    }

    public void jadikanNull() {
        papan = null;
        papanVertikal = null; // papan vertikal
        papanDiagonalKiriAtasKeKananBawahPart1 = null; // papan diagonal kiri atas kanan
        // bawah 1
        papanDiagonalKiriAtasKeKananBawahPart2 = null; // papan diagonal kiri atas kanan
        // bawah 2
        papanDiagonalKananAtasKeKiriBawahPart1 = null; // papan diagonal kanan atas kiri
        // bawah 1
        papanDiagonalKananAtasKeKiriBawahPart2 = null; // papan diagonal kanan atas kiri
        // bawah 2
        grid = null;
        kata = null;
        waktuEksekusi = 0;
    }

}
